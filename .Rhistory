tail(ourdata, 10)
#create a subset data for training
n_for = 170
ts_faustin_train <- subset(ts_faustin,
end = length(ts_faustin)-n_for)
#create a subset data for experiment
ts_faustin_test <- subset(ts_faustin,
start = length(ts_faustin)-n_for)
print(start(ts_faustin_train))
print(end(ts_faustin_train))
print(start(ts_faustin_test))
print(end(ts_faustin_test))
#create a subset data for training
n_for = 85
ts_faustin_train <- subset(ts_faustin,
end = length(ts_faustin)-n_for)
#create a subset data for experiment
ts_faustin_test <- subset(ts_faustin,
start = length(ts_faustin)-n_for)
print(start(ts_faustin_train))
print(end(ts_faustin_train))
print(start(ts_faustin_test))
print(end(ts_faustin_test))
autoplot(ts_faustin_train)
autoplot(ts_faustin_test)
#create a subset data for training
n_for = 41
ts_faustin_train <- subset(ts_faustin,
end = length(ts_faustin)-n_for)
#create a subset data for experiment
ts_faustin_test <- subset(ts_faustin,
start = length(ts_faustin)-n_for)
print(start(ts_faustin_train))
print(end(ts_faustin_train))
print(start(ts_faustin_test))
print(end(ts_faustin_test))
autoplot(ts_faustin_train)
autoplot(ts_faustin_test)
#create a subset data for training
n_for = 85
ts_faustin_train <- subset(ts_faustin,
end = length(ts_faustin)-n_for)
#create a subset data for experiment
ts_faustin_test <- subset(ts_faustin,
start = length(ts_faustin)-n_for+1)
print(start(ts_faustin_train))
print(end(ts_faustin_train))
print(start(ts_faustin_test))
print(end(ts_faustin_test))
autoplot(ts_faustin_train)
autoplot(ts_faustin_test)
#seasonal_naive <- snaive(ts_faustin_train, h=12) #training Data
seasonal_naive <- snaive(ts_faustin_train, h=85) #the whole coal dataset
summary (seasonal_naive)
plot(seasonal_naive)
naivem <- naive(ts_faustin_train, h=85)
summary (naivem)
plot(naivem)
#coal forecast
arima_coal<- auto.arima(ts_faustin_train)
arima_coal_for1 <- forecast(arima_coal, h=85)
autoplot(ts_faustin_train, series="Original")+
autolayer(arima_coal$fitted, series="ARIMA Model")+
autolayer(arima_coal_for1$mean, series = "ARIMA Forecast")+
#geom_smooth(method = "lm", se = FALSE)+
labs(title = "Coal Imports forecast",
y = "Net Imports",
x = "Years")
ETS  <-  stlf(ts_faustin_train, h=85)
autoplot(ETS) + ylab("Coal imports")
#Plot model + observed data
autoplot(ts_faustin_train) +
autolayer(ETS, series="STL + ETS",PI=FALSE) +
ylab("Coal imports")
ARIMA_Four_fit <- auto.arima(ts_faustin_train,
seasonal=FALSE,
lambda=0,
xreg=fourier(ts_faustin_train,
K=c(6))
)
# ARIMA Fourier
ARIMA_Four_model <- forecast(ARIMA_Four_fit,
xreg=fourier(ts_faustin_train,
K=c(6),
h=85),
h=85
)
#Plot foresting results
autoplot(ARIMA_Four_model) + ylab("Power Demand")
#Plot model + observed data
autoplot(ts_faustin_train) +
autolayer(ARIMA_Four_model, series="ARIMA_FOURIER",PI=FALSE) +
ylab("Coal Import")
TBATS_fit <- tbats(ts_faustin_train)
TBATS_for <- forecast(TBATS_fit, h=85)
#Plot foresting results
autoplot(TBATS_for) +
ylab("Coal Import")
#Plot model + observed data
autoplot(ts_faustin_train) +
autolayer(TBATS_for, series="TBATS",PI=FALSE)+
ylab("Coal Import")
NN_fit <- nnetar(ts_faustin_train,
p=1,
P=0,
K=c(6))
NN_for <- forecast(NN_fit, h=85)
#Plot foresting results
autoplot(NN_for) +
ylab("Coal Import")
#Plot model + observed data
autoplot(ts_faustin_train) +
autolayer(NN_for, series="Neural Network",PI=FALSE)+
ylab("Coal Import")
NN_fit_reg <- nnetar(ts_faustin_train,
p=1,
P=0,
xreg=fourier(ts_faustin_train, K=c(6)))
NN_for_reg <- forecast(NN_fit_reg, h=85,xreg=fourier(ts_faustin_train,
K=c(6),h=85))
#Plot foresting results
autoplot(NN_for_reg) +
ylab("Coal Import")
#Plot model + observed data
autoplot(ts_faustin_train) +
autolayer(NN_for_reg, series="",PI=FALSE)+
ylab("Coal Import")
#Model 1: Seasonal Naive
Seasonaive_score <- accuracy (seasonal_naive$mean, ts_faustin_test)
#Model 2 : Naive model
Naive_score <- accuracy(naivem$mean, ts_faustin_test)
#Model 3: ARIMA model
ARIMA_score <- accuracy(arima_coal_for1$mean, ts_faustin_test)
#Model 4 : ETS model
ETS_scores <- accuracy(ETS$mean,ts_faustin_test)
#Model 5: ARIMA + Fourier
ARIMA_Four_scores <- accuracy(ARIMA_Four_model$mean,ts_faustin_test)
# Model 6:  TBATS
TBATS_scores <- accuracy(TBATS_for$mean,ts_faustin_test)
# Model 5:  Neural Network
NN_scores <- accuracy(NN_for$mean,ts_faustin_test)
# Model 5:  Neural Network
NN_scores_reg <- accuracy(NN_for_reg$mean,ts_faustin_test)
#create data frame
scores <- as.data.frame(
rbind(Seasonaive_score, Naive_score, ARIMA_score, ETS_scores, ARIMA_Four_scores, TBATS_scores, NN_scores, NN_scores_reg)
)
row.names(scores) <- c("SEANAIV", "NAIVE", "ARMA", "ETS", "ARIMA+Fourier", "TBATS","NN", "NNREG")
#choose model with lowest RMSE
best_model_index <- which.min(scores[,"RMSE"])
cat("The best model by RMSE is:", row.names(scores[best_model_index,]))
kbl(scores,
caption = "Forecast Accuracy for Coal Import",
digits = array(5,ncol(scores))) %>%
kable_styling(full_width = FALSE, position = "center", latex_options = "hold_position") %>%
#highlight model with lowest RMSE
kable_styling(latex_options="striped", stripe_index = which.min(scores[,"RMSE"]))
# Define the start and end date
start_date <- as.Date("2023-12-01")
end_date <- as.Date("2030-12-31")
dates <- seq.Date(start_date, end_date, by="day")
Best_model <- tbats(ts_faustin)
future_forecast <- forecast(Best_model, h=85)
forecasted_values <- future_forecast$mean
coalforecast <- data.frame(date = dates, load = round(forecasted_values, digits=0))
length(dates)
length(forecasted_values)
print(start(ts_faustin_train))
print(end(ts_faustin_train))
print(start(ts_faustin_test))
print(end(ts_faustin_test))
# Define the start and end date
start_date <- as.Date("2023-12")
# Define the start and end date
start_date <- as.Date("2023-12-01")
end_date <- as.Date("2030-12-31")
dates <- seq.Date(start_date, end_date, by="month")
Best_model <- tbats(ts_faustin)
future_forecast <- forecast(Best_model, h=85)
length(dates)
length(forecasted_values)
forecasted_values <- future_forecast$mean
coalforecast <- data.frame(date = dates, load = round(forecasted_values, digits=0))
# Save the forecast dataframe to a CSV file
write.csv(coalforecast, file= "/Users/faustinkambale/Library/CloudStorage/OneDrive-DukeUniversity/Spring 2024 classes/Time Series 4 Energy/Competition/Faustin_Yilun/tsa-s24-competition/coalforecast.csv", row.names = FALSE)
autoplot(ts_faustin) +
autolayer(TBATS_for, series="TBATS",PI=FALSE)+
autolayer(future_forecast, series = "Coal forecast", PI=FALSE)
ylab("Coal Import forecasting")
autoplot(ts_faustin) +
autolayer(TBATS_for, series="TBATS",PI=FALSE)+
autolayer(future_forecast, series = "Coal forecast", PI=FALSE)
ylab("Coal Import forecasting")
autoplot(ts_faustin) +
autolayer(TBATS_for, series="TBATS",PI=FALSE)+
autolayer(future_forecast, series = "Coal forecast", PI=FALSE)+
ylab("Coal Import forecasting")
autoplot(ts_faustin) +
autolayer(TBATS_for, series="TBATS",PI=FALSE)+
autolayer(future_forecast, series = "Coal forecast", PI=FALSE) +
ylab("Coal Import forecasting")
print(start(ts_faustin_test))
autoplot(ts_faustin) +
autolayer(TBATS_for, series="TBATS",PI=FALSE)+
autolayer(future_forecast, series = "Coal forecast", PI=FALSE) +
ylab("Coal Import forecasting")
print(end(ts_faustin_test))
print(start(ts_faustin_train))
print(end(ts_faustin_train))
print
print(start(ts_faustin_test))
print(end(ts_faustin_test))
faustin_decomp <- plot(decompose(ts_faustin, type = "additive"))
coal_decomp <- mstl(ts_data[,2])
autoplot(coal_decomp, main = "CO2 Emmission from Coal Imports")
ts_faustin_train <- subset(ts_faustin,end = length(ts_faustin)-n_for)
coal_ts <- ts(ourdata[,2], start=c(1973,1),frequency=12)
plot(coal_ts)
coal_acf <- Acf(coal_ts, lag.max = 40, main = "Co2 Emission from Coal Imports")
coal_pacf <-Pacf(coal_ts, lag.max = 40, main = "Coal Imports")
coal_acf <- Acf(coal_ts, lag.max = 40, main = "Co2 Emission from Coal Imports")
coal_pacf <-Pacf(coal_ts, lag.max = 40, main = "Coal Imports")
plot_grid (
autoplot(coal_acf, main = "Coal Imports"),
autoplot(coal_pacf, main = "Coal Imports")
)
Coal_decomp <- plot(decompose(ts_faustin, type = "additive"))
coal_decomp <- mstl(ts_data[,2])
autoplot(coal_decomp, main = "CO2 Emmission from Coal Imports")
data_filtered <- filter(ourdata, year(Month) >= 2010)
coal_ts1 <- ts(data_filtered[,2], start=c(2010,1),frequency=12)
plot(coal_ts1)
coal_decomp1 <- plot(decompose(coal_ts1, type = "additive"))
ts_faustin_train <- subset(ts_faustin,end = length(ts_faustin)-n_for)
coal_ts_train <- subset(coal_ts,end = length(coal_ts)-n_for)
#create a subset data for experiment
coal_ts_test <- subset(coal_ts, start = length(ts_faustin)-n_for+1)
print(start(coal_ts_train))
print(end(coal_ts_train))
print(start(coal_ts_test))
print(end(coal_ts_test))
autoplot(coal_ts_train)
autoplot(coal_ts_test)
#seasonal_naive <- snaive(coal_ts_train, h=12) #training Data
seasonal_naive <- snaive(coal_ts_train, h=85) #the whole coal dataset
summary (seasonal_naive)
plot(seasonal_naive)
naivem <- naive(coal_ts_train, h=85)
summary (naivem)
plot(naivem)
#coal forecast
arima_coal<- auto.arima(coal_ts_train)
arima_coal_for1 <- forecast(arima_coal, h=85)
autoplot(coal_ts_train, series="Original")+
autolayer(arima_coal$fitted, series="ARIMA Model")+
autolayer(arima_coal_for1$mean, series = "ARIMA Forecast")+
labs(title = "Coal Imports forecast",
y = "Net Imports",
x = "Years")
naivem <- naive(coal_ts_train, h=85)
summary (naivem)
plot(naivem)
naivem <- naive(coal_ts_train, h=85)
summary (naivem)
plot(naivem)
labs(title = "Coal Imports forecast",
y = "Net Imports",
x = "Years")
autoplot(naivem)
autoplot(naivem,
labs(title = "Coal Imports forecast",
y = "Net Imports",
x = "Years"))
autoplot(naivem) +
labs(title = "Coal Imports forecast",
y = "Net Imports",
x = "Years")
autoplot(naivem) +
labs(title = "Coal Imports Naive forecast",
y = "Net Imports",
x = "Years")
autoplot(naivem) +
labs(title = "Coal Imports Naive forecast", y = "Net Imports", x = "Years")
#coal forecast
arima_coal<- auto.arima(coal_ts_train)
arima_coal_for1 <- forecast(arima_coal, h=85)
autoplot(coal_ts_train, series="Original")+
autolayer(arima_coal$fitted, series="ARIMA Model")+
autolayer(arima_coal_for1$mean, series = "ARIMA Forecast")+
labs(title = "Coal Imports Arima forecast",
y = "Net Imports",
x = "Years")
autoplot(coal_ts_train) +
autolayer(ETS, series="STL + ETS",PI=FALSE) +
ylab("Coal imports")
ETS  <-  stlf(coal_ts_train, h=85)
autoplot(ETS) + ylab("Coal imports")
autoplot(coal_ts_train) +
autolayer(ETS, series="STL + ETS",PI=FALSE) +
labs(title = "Coal Imports ETS forecast",
y = "Net Imports",
x = "Years")
ARIMA_Four_fit <- auto.arima(coal_ts_train,
seasonal=FALSE,
lambda=0,
xreg=fourier(coal_ts_train,
K=c(6))
)
# ARIMA Fourier
ARIMA_Four_model <- forecast(ARIMA_Four_fit,
xreg=fourier(coal_ts_train,
K=c(6),
h=85),
h=85
)
#Plot foresting results
autoplot(ARIMA_Four_model) + ylab("Coal Import")
#Plot model + observed data
autoplot(coal_ts_train) +
autolayer(ARIMA_Four_model, series="ARIMA_FOURIER",PI=FALSE) +
labs(title = "Coal Imports Arima Fourrier forecast",
y = "Net Imports",
x = "Years")
#Plot foresting results
autoplot(TBATS_for) +
ylab("Coal Import")
#Plot foresting results
autoplot(TBATS_for)
#Plot model + observed data
autoplot(coal_ts_train) +
autolayer(TBATS_for, series="TBATS",PI=FALSE)+
ylab("Coal Import")
TBATS_fit <- tbats(coal_ts_train)
TBATS_for <- forecast(TBATS_fit, h=85)
#Plot foresting results
autoplot(TBATS_for)
#Plot model + observed data
autoplot(coal_ts_train) +
autolayer(TBATS_for, series="TBATS",PI=FALSE)+
labs(title = "Coal Imports TBATS forecast",
y = "Net Imports",
x = "Years")
NN_fit <- nnetar(coal_ts_train, p=1, P=0, K=c(6))
NN_for <- forecast(NN_fit, h=85)
#Plot foresting results
autoplot(NN_for)
#Plot model + observed data
autoplot(coal_ts_train) +
autolayer(NN_for, series="Neural Network",PI=FALSE)+
labs(title = "Coal Imports NN forecast",
y = "Net Imports",
x = "Years")
#Plot foresting results
autoplot(NN_for_reg) +
#Plot model + observed data
autoplot(coal_ts_train) +
autolayer(NN_for_reg, series="",PI=FALSE)+
labs(title = "Coal Imports NN+regr forecast",
y = "Net Imports",
x = "Years")
#Plot model + observed data
autoplot(coal_ts_train) +
autolayer(NN_for, series="Neural Network",PI=FALSE)+
labs(title = "Coal Imports NN forecast",
y = "Net Imports",
x = "Years")
#Plot foresting results
autoplot(NN_for_reg) +
#Plot model + observed data
autoplot(coal_ts_train) +
autolayer(NN_for_reg, series="",PI=FALSE) +
labs(title = "Coal Imports NN+regr forecast",
y = "Net Imports",
x = "Years")
#Plot foresting results
autoplot(NN_for_reg) +
#Plot model + observed data
autoplot(coal_ts_train) +
autolayer(NN_for_reg, series="Neural Network",PI=FALSE) +
labs(title = "Coal Imports NN+regr forecast",
y = "Net Imports",
x = "Years")
#Plot foresting results
autoplot(NN_for_reg) +
#Plot model + observed data
autoplot(coal_ts_train) +
autolayer(NN_for_reg, series="Neural Network",PI=FALSE) +
labs(title = "Coal Imports NN+regr forecast",
y = "Net Imports",
x = "Years")
#Plot foresting results
autoplot(NN_for_reg) +
#Plot model + observed data
autoplot(coal_ts_train) +
autolayer(NN_for_reg, series="Neural Network",PI=FALSE) +
labs(title = "Coal Imports NN+regr forecast",
y = "Net Imports",
x = "Years")
NN_fit_reg <- nnetar(coal_ts_train, p=1,  P=0,
xreg=fourier(coal_ts_train, K=c(6)))
NN_for_reg <- forecast(NN_fit_reg, h=85,xreg=fourier(coal_ts_train,
K=c(6),h=85))
#Plot foresting results
autoplot(NN_for_reg) +
#Plot model + observed data
autoplot(coal_ts_train) +
autolayer(NN_for_reg, series="Neural Network",PI=FALSE) +
labs(title = "Coal Imports NN+regr forecast",
y = "Net Imports",
x = "Years")
#Plot foresting results
autoplot(NN_for_reg)
#Plot model + observed data
autoplot(coal_ts_train) +
autolayer(NN_for_reg, series="Neural Network",PI=FALSE) +
labs(title = "Coal Imports NN+regr forecast",
y = "Net Imports",
x = "Years")
#Plot foresting results
autoplot(NN_for_reg)
#Plot model + observed data
autoplot(coal_ts_train) +
autolayer(NN_for_reg, series="Neural Network",PI=FALSE) +
labs(title = "Coal Imports NN+regr forecast",
y = "Net Imports",
x = "Years")
#Model 1: Seasonal Naive
Seasonaive_score <- accuracy (seasonal_naive$mean, coal_ts_test)
#Model 2 : Naive model
Naive_score <- accuracy(naivem$mean, coal_ts_test)
#Model 3: ARIMA model
ARIMA_score <- accuracy(arima_coal_for1$mean, coal_ts_test)
#Model 4 : ETS model
ETS_scores <- accuracy(ETS$mean,coal_ts_test)
#Model 5: ARIMA + Fourier
ARIMA_Four_scores <- accuracy(ARIMA_Four_model$mean,coal_ts_test)
# Model 6:  TBATS
TBATS_scores <- accuracy(TBATS_for$mean,coal_ts_test)
# Model 5:  Neural Network
NN_scores <- accuracy(NN_for$mean,coal_ts_test)
# Model 5:  Neural Network
NN_scores_reg <- accuracy(NN_for_reg$mean,coal_ts_test)
# Model 5:  Neural Network
NN_scores_reg <- accuracy(NN_for_reg$mean,coal_ts_test)
### Compare performance metrics
```{r}
#create data frame
scores <- as.data.frame(
rbind(Seasonaive_score, Naive_score, ARIMA_score, ETS_scores, ARIMA_Four_scores, TBATS_scores, NN_scores, NN_scores_reg)
)
row.names(scores) <- c("SEANAIV", "NAIVE", "ARMA", "ETS", "ARIMA+Fourier", "TBATS","NN", "NNREG")
#choose model with lowest RMSE
best_model_index <- which.min(scores[,"RMSE"])
cat("The best model by RMSE is:", row.names(scores[best_model_index,]))
summary(ourdata, 10)
#Model 1: Seasonal Naive
Seasonaive_score <- accuracy (seasonal_naive$mean, coal_ts_test)
#Model 2 : Naive model
Naive_score <- accuracy(naivem$mean, coal_ts_test)
#Model 3: ARIMA model
ARIMA_score <- accuracy(arima_coal_for1$mean, coal_ts_test)
#Model 4 : ETS model
ETS_scores <- accuracy(ETS$mean,coal_ts_test)
#Model 5: ARIMA + Fourier
ARIMA_Four_scores <- accuracy(ARIMA_Four_model$mean,coal_ts_test)
# Model 6:  TBATS
TBATS_scores <- accuracy(TBATS_for$mean,coal_ts_test)
# Model 7:  Neural Network
NN_scores <- accuracy(NN_for$mean,coal_ts_test)
# Model 8:  Neural Network
NN_scores_reg <- accuracy(NN_for_reg$mean,coal_ts_test)
#create data frame
scores <- as.data.frame(
rbind(Seasonaive_score, Naive_score, ARIMA_score, ETS_scores, ARIMA_Four_scores, TBATS_scores, NN_scores, NN_scores_reg)
)
row.names(scores) <- c("SEANAIV", "NAIVE", "ARMA", "ETS", "ARIMA+Fourier", "TBATS","NN", "NNREG")
#choose model with lowest RMSE
best_model_index <- which.min(scores[,"RMSE"])
cat("The best model by RMSE is:", row.names(scores[best_model_index,]))
kbl(scores,
caption = "Forecast Accuracy for Coal Import",
digits = array(5,ncol(scores))) %>%
kable_styling(full_width = FALSE, position = "center", latex_options = "hold_position") %>%
#highlight model with lowest RMSE
kable_styling(latex_options="striped", stripe_index = which.min(scores[,"RMSE"]))
autoplot(coal_ts) +
autolayer(seasonal_naive, PI=FALSE, series="Seasonal Naive")+
autiolayer(naivem, PI = FALE, series = "Naive") +
autolayer(arima_coal_for1, PF=FALSE, series= "Arima")+
autolayer(ETS, PI=FALSE, series="STL+ETS") +
autolayer(ARIMA_Four_model, PI=FALSE, series="ARIMA + Fourier") +
autolayer(TBATS_for,PI=FALSE, series="TBATS") +
autolayer(NN_for,PI=FALSE, series="NN") +
autolayer(NN_for_reg, PI=FALSE, series="NN fourrier")
autoplot(coal_ts) +
autolayer(seasonal_naive, PI=FALSE, series="Seasonal Naive")+
autolayer(naivem, PI = FALE, series = "Naive") +
autolayer(arima_coal_for1, PF=FALSE, series= "Arima")+
autolayer(ETS, PI=FALSE, series="STL+ETS") +
autolayer(ARIMA_Four_model, PI=FALSE, series="ARIMA + Fourier") +
autolayer(TBATS_for,PI=FALSE, series="TBATS") +
autolayer(NN_for,PI=FALSE, series="NN") +
autolayer(NN_for_reg, PI=FALSE, series="NN fourrier")
autoplot(coal_ts) +
autolayer(seasonal_naive, PI=FALSE, series="Seasonal Naive")+
autolayer(naivem, PI = FALSE, series = "Naive") +
autolayer(arima_coal_for1, PF=FALSE, series= "Arima")+
autolayer(ETS, PI=FALSE, series="STL+ETS") +
autolayer(ARIMA_Four_model, PI=FALSE, series="ARIMA + Fourier") +
autolayer(TBATS_for,PI=FALSE, series="TBATS") +
autolayer(NN_for,PI=FALSE, series="NN") +
autolayer(NN_for_reg, PI=FALSE, series="NN fourrier")
